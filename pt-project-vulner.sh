#!/bin/bash
echo
## 1- the user enters a network and a range to scan and the result are stored in a directory/file
## viable tools : *nmap *masscan

## 2- the script will additionally look for vulnerabillities in the network
## viable tools : *nmap scirpintg engine *searchsploit *finding weak password using hydra..

## 3- at the end of the whole proccess show the statistics of the scan and the vulerabillty scan



## this script recieves a network and a range to scan from the user and accordig to the prefix it will use either nmap or masscan
##

#color templates
CyanS="\e[36m"
CyanE="\e[0m"
location=$(pwd)



prompt ()
{			## ask the user for his preference
            echo -e -n "[!] $CyanS Scan for all the possbile hosts or a single host? $CyanE a/s --> " ; read net
            echo
            

			case $net in
                         
           ## by setting the range to 32 we can scan one single host        
          s) echo -e -n "[!] $CyanS eneter single host $CyanE --> " ; read single
                 
                  network="$single"
                  range="32"
                  
                  ## making a directory for the all the future files
                  mkdir $network-$range-$date--parent && echo -e "[#] $CyanS Directory $CyanE $network-$range-$date--parent $CyanS was created in your current location$CyanE"
             echo "
             "
           ;;


            ## extract current machine IP and range
   	       a) me=$(ip a | egrep -o '([0-9]{1,3}\.){3}[0-9]{1,3}/..' | grep -v "127") 

            ## seperate the IP and the range
            network=$(echo $me | awk 'BEGIN {FS = "/"} ; {print $1}')
            range=$(echo $me | awk 'BEGIN {FS = "/"} ; {print $2}')

             ## making a directory for the all the future files
             mkdir $network-$range-$date--parent && echo -e "[#] $CyanS Directory $CyanE $network-$range-$date--parent $CyanS was created in your current location$CyanE"
             echo "
             "
            ;;

            *) echo -e -n "[!] $CyanS Invalid choice $CyanE"
               exit 
               ;;
      esac


        echo -e -n "[!] $CyanS Would you like to create username file and password now and/or insert existing ones? $CyanE c/e --> " ; read copt
        echo
        case $copt in

          ## username and password files later used for searching for weak pw's, also looped just in case a typo has occured
         e) echo -e -n "[#] $CyanS Enter a username file $CyanE && $CyanS a password file $CyanE --> " ; read usrf pwf
                   echo "
                   "

          while [[ ! -f $usrf ]] && [[ ! -f $pwf ]] || [[ ! -f $usrf ]] || [[ ! -f $pwf ]]
        do
          echo -e "[!] $CyanS One or more files does not exits $CyanE"
          echo
          echo -e -n "[#] $CyanS Enter a username file $CyanE && $CyanS a password file $CyanE --> " ; read usrf pwf 
          echo "
          "    
        done
        ;;
          
    ## taking the usernames and passwords, moving them to a file and then using sed to make sure that each single username and password are in a standalone line 
         c) echo -e -n "[!] $CyanS create: 2 new files (1)/ only a username file (2)/ only a passowrd file (3) $CyanE --> " ; read num  
                
                if [[ $num == 1 ]] ## create both username and password files
                then
                 echo -e "[!] $CyanS enter usernames with "," as a seperator $CyanE --> " 
                 read usernames 
                 echo $usernames > unames
                 echo
                 echo -e "[!] $CyanS created unames $CyanE"
                 sed -i 's/,/\n/g' unames 
                 echo
                 echo -e "[!] $CyanS enter passwords with "," as a seperator--> $CyanE" 
                 read passwords 
                 echo $passwords > pwords
                 echo
                 echo -e "[!] $CyanS created pwords $CyanE"
                 sed -i 's/,/\n/g' pwords

                 usrf=unames
                 pwf=pwords
                 echo

             elif [[ $num == 2 ]] ## create only a username file
              then
                 echo -e "[!] $CyanS enter usernames with "," as a seperator $CyanE --> " 
                 read usernames 
                 echo $usernames > unames
                 echo
                 echo -e "[!] $CyanS created unames $CyanE"
                 sed -i 's/,/\n/g' unames 
                 echo
                 echo -e -n "[!] $CyanS Insert a password file $CyanE --> " ; read passwordfile
                 while [[ ! -f $passwordfile ]]
                 do 
                    echo
                    echo -e "[!] $CyanS The file does not exits $CyanE"
                    echo
                    echo -e -n "[!] $CyanS Inesert a password file $CyanE --> " ; read passwordfile
                    done  
                  
                 usrf=unames
                 pwf=$passwordfile
                 echo
                
             elif [[ $num == 3 ]] ## create only a password file
              then
                 echo -e -n "[!] $CyanS Insert a username file $CyanE --> " ; read usernamefile
                 while [[ ! -f $usernamefile ]]
                 do
                    echo
                    echo -e "[!] $CyanS The file does not exits $CyanE"
                    echo
                    echo -e -n "[!] $CyanS Insert a username file $CyanE --> " ; read usernamefile
                    done                   
                 echo
                 echo -e "[!] $CyanS enter passwords with "," as a seperator--> $CyanE" 
                 read passwords 
                 echo $passwords > pwords
                 echo
                 echo -e "[!] $CyanS created pwords $CyanE"
                 sed -i 's/,/\n/g' pwords

                 usrf=$usernamefile
                 pwf=pwords
                 echo
              fi
                  ;;

                  *) echo -e -n "[!] $CyanS Invalid choice $CyanE"
                    exit 
                    ;;
esac
}




scan ()
{
	## initiate a scan in accordance with the ueser input
echo "[!] Note: -sV is on by default"
echo    
echo -e -n "[#] $CyanS Enter flags, Example: $CyanE -Pn (treat all hosts as open) | -O (operating system type) | -sU (udp scan) | -p- (scan all tcp port instead of 1000 most common ) --> " ; read a b c d e f g h i
      
      scanopts=($a $b $c $d $e $f $g $h $i)
      echo "
      "
      echo -e -n "[#] $CyanS Select scan speed (1-5 while 1 is the guy with the scooter and 5 is the guy with the porsche) $CyanE --> " ; read speed
      echo "
      "
   ## loop nmap on the possible hosts in the network, and with the usage of the apersand sign (&) we can run multiple nmaps in parallel in order to save time
for scan in $(nmap $network/$range -sL -n | egrep -o '([0-9]{1,3}\.){3}[0-9]{1,3}')
do
	touch $network-$range-$date--parent/$scan-$range-nmap.details ## <-- creating a file for the scan details 
	## adding the sleep command in order to give the system some breathing space, otherwise it all goes dark. :o spooky
 	sleep 0.2
      echo
      echo -e "--> $CyanS Scanning $CyanE $scan" ; nmap $scan -sV $scanopts -T$speed > $network-$range-$date--parent/$scan-$range-nmap.details | grep "*" &
      
   done
       wait 2> /dev/nul
       echo
       echo -e "[!] $CyanS All Nmap scans are done ! $CyanE"
       echo
       echo -e "[!] $CyanS Now deleting all empty scan files for convinience :D ! $CyanE"
       echo
       rm $(ls -ld $network-$range-$date--parent/* | awk ' $5 < 207 {print $9}') 2> /dev/nul ; echo -e "[!] $CyanS Trash removed >:D ! $CyanE"


}




exploit ()
{
## using searchsploit to find vulnerable services via their version
echo
echo -e "--------------------- $CyanS SearchSploiting . . . $CyanE ---------------------"
echo

## iterates through every file
for Sfile in $(ls -1 $network-$range-$date--parent) 
do
    ## set the number of times the loop works by the number of services
    for line in $(seq 1 "$(cat $network-$range-$date--parent/$Sfile | grep open | awk '{print $4,$5}' | wc -l)") 
    do

       ## searchsploiting every service
       for service in "$(cat $network-$range-$date--parent/$Sfile | grep open | awk '{print $4,$5,$6}' | sed -n "$line"p)" 
       do

         ## avoids searchsploiting files with no open ports and working services and files with '  ' in their name
         if [[ ! -z "$service" ]] && [[ "$service" != '  ' ]] 
         then
            ## searchsploiting and appending the output to the scanned file
             searchsploit "$service" | grep -v "Exploits: No Results" | grep -v "Shellcodes: No Results" >> $network-$range-$date--parent/$Sfile & 
         fi
            
       done
           
    done

done

wait 

## adding a tag to the file name to indicate possible exploits
for explo in $(ls -1 $network-$range-$date--parent)
do
    if [[ ! -z $(grep -i "exploit title" $network-$range-$date--parent/$explo) ]] || [[ ! -z $(grep -i "Sshellcode title" $network-$range-$date--parent/$explo) ]]
            then
                #echo $explo
               mv $network-$range-$date--parent/$explo $network-$range-$date--parent/$explo.Exploitable 
    fi
done
echo -e "       --------------------- $CyanS Done . . . $CyanE ---------------------"
echo "
"
}




pw ()
{
    ## Trying to find weak passwords for users via services such as SSH, FTP, TELNET, VNC

echo -e "[#] $CyanS Will now start looking for weak passwords $CyanE"
echo
touch $network-$range-$date--parent/weak-pw.lst

## searching the files of scanned hosts for services that allow login and are on open ports in order to run NSE and potentially finding weak passwords
for wpw in $(ls -1 $network-$range-$date--parent)  
do

    if [[ ! -z $(grep "open" $network-$range-$date--parent/$wpw | grep -o -i "ssh") ]] 
     then
        addr1=$(ls -1 $network-$range-$date--parent | grep -i "$wpw" | egrep -o '([0-9]{1,3}\.){3}[0-9]{1,3}')
        port1=$(grep "open" $network-$range-$date--parent/$wpw | grep "ssh" | awk 'BEGIN {FS="/"} {print $1}')

## bruting through ssh service            
        echo -e "[!] $CyanS Bruting $CyanE $addr1 $CyanS on port $port1 $CyanE"
        nmap -p$port1 --script ssh-brute.nse --script-args userdb="$usrf",passdb="$pwf" $addr1 | egrep 'open|Valid cred' >> $network-$range-$date--parent/weak-pw.lst && echo "$addr1" >> $network-$range-$date--parent/weak-pw.lst && echo "------------------------------" >> $network-$range-$date--parent/weak-pw.lst &
        echo

#----------------------------------------------------------------------------------------------------------------------------------------------------------

## bruting through telnet service
     elif [[ ! -z $(grep "open" $network-$range-$date--parent/$wpw | grep -o -i "telnet") ]]
     then
         addr2=$(ls -1 $network-$range-$date--parent | grep -i "$wpw" | egrep -o '([0-9]{1,3}\.){3}[0-9]{1,3}')
         port2=$(grep "open" $network-$range-$date--parent/$wpw | grep "telnet" | awk 'BEGIN {FS="/"} {print $1}') 
         
         echo -e "[!] $CyanS Bruting $CyanE $addr2 $CyanS on port $port2 $CyanE"
         nmap -p$port2 --script telnet-brute.nse --script-args userdb="$usrf",passdb="$pwf" $addr2 | egrep 'open|Valid cred' >> $network-$range-$date--parent/weak-pw.lst && echo "$addr2" >> $network-$range-$date--parent/weak-pw.lst && echo "------------------------------" >> $network-$range-$date--parent/weak-pw.lst &
         echo

#----------------------------------------------------------------------------------------------------------------------------------------------------------

## bruting through ftp service
     elif [[ ! -z $(grep "open" $network-$range-$date--parent/$wpw | grep -o -i "ftp") ]]
     then
        addr3=$(ls -1 $network-$range-$date--parent | grep -i "$wpw" | egrep -o '([0-9]{1,3}\.){3}[0-9]{1,3}')
        port3=$(grep "open" $network-$range-$date--parent/$wpw | grep "ftp" | awk 'BEGIN {FS="/"} {print $1}')

        echo -e "[!] $CyanS Bruting $CyanE $addr3 $CyanS on port $port3 $CyanE"
        nmap -p$port3 --script ftp-brute.nse --script-args userdb="$usrf",passdb="$pwf" $addr3 | egrep 'open|Valid cred' >> $network-$range-$date--parent/weak-pw.lst && echo "$addr3" >> $network-$range-$date--parent/weak-pw.lst && echo "------------------------------" >> $network-$range-$date--parent/weak-pw.lst &
        echo
#----------------------------------------------------------------------------------------------------------------------------------------------------------

## bruting through vnc service
     elif [[ ! -z $(grep "open" $network-$range-$date--parent/$wpw | grep -o -i "vnc") ]]
     then
        addr4=$(ls -1 $network-$range-$date--parent | grep -i "$wpw" | egrep -o '([0-9]{1,3}\.){3}[0-9]{1,3}')
        port4=$(grep "open" $network-$range-$date--parent/$wpw | grep "vnc" | awk 'BEGIN {FS="/"} {print $1}')

        echo -e "[!] $CyanS Bruting $CyanE $addr4 $CyanS on port $port4 $CyanE"
        nmap -p$port4 --script vnc-brute.nse --script-args userdb="$usrf",passdb="$pwf" $addr4 | egrep 'open|Valid cred' >> $network-$range-$date--parent/weak-pw.lst && echo "$addr4" >> $network-$range-$date--parent/weak-pw.lst && echo "------------------------------" >> $network-$range-$date--parent/weak-pw.lst &
        echo

    fi
done

echo "
"

wait
}



info ()
{
echo
echo "----------------------------------------------------------------------------------------------------------------------------"
echo "
"
echo -e "[+] $CyanS Out of $CyanE $(nmap $network/$range -sL -n | egrep '([0-9]{1,3}\.){3}[0-9]{1,3}' | wc -l) $CyanS scanned end-points $CyanE $(ls -1 $network-$range-$date--parent | egrep '([0-9]{1,3}\.){3}[0-9]{1,3}' | wc -l) $CyanS are up with one or more open ports $CyanE"
echo "--------------------------------------------------------------"
echo -e "[+] $CyanS Out of the viable hosts $CyanE $(ls -1 $network-$range-$date--parent | grep Exploitable | wc -l) $CyanS have possible exploits $CyanE" 
echo "--------------------------------------------------------------"
echo -e "[!] $CyanS Listing Exploitable hosts: $CyanE" 
echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "
## reading file with .exploitable in order to draw the host name and the ip of said host
for host in $(ls -1 $network-$range-$date--parent | egrep '([0-9]{1,3}\.){3}[0-9]{1,3}' | grep Explo)
do
   echo -e "[+] $CyanS $(cat $network-$range-$date--parent/$host | grep "Nmap scan report" | awk '{print $5}') $CyanE"
   echo -e "[+] $CyanS $(cat $network-$range-$date--parent/$host | grep "Service Info:" | cut -d ";" -f 1) $CyanE"
echo
done
echo "--------------------------------------------------------------"
echo -e "[!] $CyanS Displaying weak passwords found: $CyanE"
echo
cat $network-$range-$date--parent/weak-pw.lst
echo "--------------------------------------------------------------"

## this loop allows the user to enter an ip addr of a host with possible exploits and view the found exploits
if [[ ! -z $(ls -1 $network-$range-$date--parent | grep "Explo") ]]
then
echo -e -n "[!] $CyanS Type ip addr for exploit details or exit $CyanE --> " ; read choice

while [[ ! -z $(echo $choice | egrep '([0-9]{1,3}\.){3}[0-9]{1,3}') ]]
do
    file=$(ls -1 $network-$range-$date--parent | grep $choice)
    number=$(cat $(ls -1 $network-$range-$date--parent/$file) | grep -n "Nmap done" | cut -d ":" -f 1)
    newnum=$(( $number + 1 ))    
    cat $network-$range-$date--parent/$file | sed -n ''"$newnum"',$p'
    echo "
    "
    echo -e -n "[!] $CyanS More? yes/no $CyanE --> " ; read yn
    echo
    if [[ $yn == yes ]]
     then
         echo -n "--> " ; read choice 
     else
         exit         
    fi
done
fi
}





if [[ $(whoami) == root ]]
then
echo "

██╗   ██╗██╗   ██╗██╗     ███╗   ██╗███████╗██████╗  █████╗ ██████╗ ██╗██╗     ██╗████████╗██╗   ██╗     ██╗    ██████╗ 
██║   ██║██║   ██║██║     ████╗  ██║██╔════╝██╔══██╗██╔══██╗██╔══██╗██║██║     ██║╚══██╔══╝╚██╗ ██╔╝    ███║   ██╔═████╗
██║   ██║██║   ██║██║     ██╔██╗ ██║█████╗  ██████╔╝███████║██████╔╝██║██║     ██║   ██║    ╚████╔╝     ╚██║   ██║██╔██║
╚██╗ ██╔╝██║   ██║██║     ██║╚██╗██║██╔══╝  ██╔══██╗██╔══██║██╔══██╗██║██║     ██║   ██║     ╚██╔╝       ██║   ████╔╝██║
 ╚████╔╝ ╚██████╔╝███████╗██║ ╚████║███████╗██║  ██║██║  ██║██████╔╝██║███████╗██║   ██║      ██║        ██║██╗╚██████╔╝
  ╚═══╝   ╚═════╝ ╚══════╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝ ╚═╝╚══════╝╚═╝   ╚═╝      ╚═╝        ╚═╝╚═╝ ╚═════╝ 
                                                                                                                                                                                                                                                
"
echo "
"
else
	echo "You are not operating as root"
	exit
fi


date=$(date +%d.%m.%Y_%H:%M:%S)

prompt

scan

exploit

pw

reset 2> /dev/nul

info
